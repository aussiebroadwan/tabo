// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/check/{card_id}": {
            "get": {
                "description": "Check your card to see if you won and claim your wins.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Check your card to see if you won",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "card_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.CheckCardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/picks": {
            "post": {
                "description": "Give us your numbers so you can enjoy the number of games you specify. There are some rules:\n- You can only pick numbers between ` + "`" + `1` + "`" + ` and ` + "`" + `80` + "`" + `.\n- You can only pick ` + "`" + `1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 40` + "`" + ` numbers per game.\n- You can only play ` + "`" + `1, 2, 3, 4, 5, 10, 20, 50, 100` + "`" + ` number of games.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "picks"
                ],
                "summary": "Place your picks for the next Keno game",
                "parameters": [
                    {
                        "description": "Your picks for the next selected games",
                        "name": "picks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PickRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PickResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/ws": {
            "get": {
                "description": "When a game is calculated and started, this endpoint will stream the game to the client. This will include all the picks which the client will have to display over 1.5 minutes for the proper effect.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Stream the current game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection: Upgrade",
                        "name": "Connection",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Upgrade: websocket",
                        "name": "Upgrade",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sec-Websocket-Version: 13",
                        "name": "Sec-Websocket-Version",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Message"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.APIError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "api.CheckCardResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "api.PickRequest": {
            "type": "object",
            "properties": {
                "number_games": {
                    "type": "integer"
                },
                "picks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "picks_per_game": {
                    "type": "integer"
                },
                "price_per_game": {
                    "type": "integer"
                }
            }
        },
        "api.PickResponse": {
            "type": "object",
            "properties": {
                "card_id": {
                    "type": "integer"
                },
                "last_game_num": {
                    "type": "integer"
                },
                "selection": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "start_game_num": {
                    "type": "integer"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "body": {},
                "type": {
                    "description": "The message type",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "TAB Keno API",
	Description:      "This is a sample server for TAB Keno API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
